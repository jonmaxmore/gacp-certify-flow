/**
 * üåæ GACP Survey Management System
 * ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£‡πÑ‡∏ó‡∏¢ ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ
 * - ‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠: ‡∏Å‡∏±‡∏ç‡∏ä‡∏≤, ‡∏Å‡∏£‡∏∞‡∏ä‡∏≤‡∏¢‡∏î‡∏≥, ‡πÑ‡∏û‡∏•, ‡∏Ç‡∏°‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏ô, ‡∏û‡∏£‡∏¥‡∏Å‡πÑ‡∏ó‡∏¢, ‡πÇ‡∏Å‡∏ê‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏Å‡∏á
 * - ‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ: ‡∏Å‡∏£‡∏∞‡∏ä‡∏≤‡∏¢, ‡∏Ç‡∏°‡∏¥‡πâ‡∏ô, ‡∏™‡∏∞‡∏ï‡∏≠, ‡∏û‡∏£‡∏¥‡∏Å, ‡∏Ç‡πà‡∏≤, ‡∏ï‡∏∞‡πÑ‡∏Ñ‡∏£‡πâ
 * - ‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á: ‡∏ï‡∏∞‡πÑ‡∏Ñ‡∏£‡πâ, ‡πÉ‡∏ö‡πÄ‡∏ï‡∏¢, ‡∏Ç‡∏°‡∏¥‡πâ‡∏ô, ‡∏Ç‡∏¥‡∏á, ‡∏Å‡∏£‡∏∞‡πÄ‡∏û‡∏£‡∏≤, ‡πÇ‡∏´‡∏£‡∏∞‡∏û‡∏≤
 * - ‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏â‡∏µ‡∏¢‡∏á‡πÄ‡∏´‡∏ô‡∏∑‡∏≠: ‡∏ü‡πâ‡∏≤‡∏ó‡∏∞‡∏•‡∏≤‡∏¢‡πÇ‡∏à‡∏£, ‡∏ß‡πà‡∏≤‡∏ô‡∏´‡∏≤‡∏á‡∏à‡∏£‡∏∞‡πÄ‡∏Ç‡πâ, ‡∏ö‡∏±‡∏ß‡∏ö‡∏Å, ‡∏ï‡∏∞‡πÑ‡∏Ñ‡∏£‡πâ, ‡∏Ç‡∏¥‡∏á
 * 
 * @author GACP Development Team
 * @version 2.0.0
 */

const { v4: uuidv4 } = require('uuid');

class SurveyManager {
    constructor() {
        this.surveys = new Map();
        this.responses = new Map();
        this.guestSessions = new Map(); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
        
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ‡πÑ‡∏ó‡∏¢
        this.regions = {
            'north': {
                name: '‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠',
                icon: 'üèîÔ∏è',
                provinces: ['‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢', '‡∏•‡∏≥‡∏û‡∏π‡∏ô', '‡∏•‡∏≥‡∏õ‡∏≤‡∏á', '‡∏û‡∏∞‡πÄ‡∏¢‡∏≤', '‡πÅ‡∏û‡∏£‡πà', '‡∏ô‡πà‡∏≤‡∏ô', '‡πÅ‡∏°‡πà‡∏Æ‡πà‡∏≠‡∏á‡∏™‡∏≠‡∏ô', '‡∏≠‡∏∏‡∏ï‡∏£‡∏î‡∏¥‡∏ï‡∏ñ‡πå'],
                climate: '‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏´‡∏ô‡∏≤‡∏ß‡πÄ‡∏¢‡πá‡∏ô ‡∏°‡∏µ‡∏´‡∏°‡∏≠‡∏Å‡∏´‡∏ô‡∏≤ ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ 15-32¬∞C',
                mainHerbs: ['‡∏Å‡∏±‡∏ç‡∏ä‡∏≤', '‡∏Ç‡∏°‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏ô', '‡∏Ç‡∏¥‡∏á', '‡∏Å‡∏£‡∏∞‡∏ä‡∏≤‡∏¢‡∏î‡∏≥', '‡πÑ‡∏û‡∏•', '‡∏Å‡∏£‡∏∞‡∏ó‡πà‡∏≠‡∏°'],
                characteristics: ['‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡∏£‡∏≤‡∏¢‡∏¢‡πà‡∏≠‡∏¢ 70%', '‡∏≠‡∏á‡∏Ñ‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏†‡∏π‡∏°‡∏¥‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤', '‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å‡πÅ‡∏ö‡∏ö‡∏ú‡∏™‡∏°‡∏ú‡∏™‡∏≤‡∏ô', '‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å‡∏Å‡∏±‡∏ç‡∏ä‡∏≤‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå']
            },
            'south': {
                name: '‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ',
                icon: 'üå¥',
                provinces: ['‡∏™‡∏á‡∏Ç‡∏•‡∏≤', '‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ', '‡∏¢‡∏∞‡∏•‡∏≤', '‡∏ô‡∏£‡∏≤‡∏ò‡∏¥‡∏ß‡∏≤‡∏™', '‡∏ä‡∏∏‡∏°‡∏û‡∏£', '‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä', '‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà', '‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï', '‡∏û‡∏±‡∏á‡∏á‡∏≤', '‡∏£‡∏∞‡∏ô‡∏≠‡∏á', '‡∏™‡∏ï‡∏π‡∏•', '‡∏ï‡∏£‡∏±‡∏á', '‡∏û‡∏±‡∏ó‡∏•‡∏∏‡∏á'],
                climate: '‡∏ä‡∏∑‡πâ‡∏ô ‡∏ù‡∏ô‡∏ï‡∏Å‡∏ï‡∏•‡∏≠‡∏î‡∏õ‡∏µ ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ 24-34¬∞C',
                mainHerbs: ['‡∏Å‡∏±‡∏ç‡∏ä‡∏≤', '‡∏Ç‡∏°‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏ô', '‡∏Ç‡∏¥‡∏á', '‡∏Å‡∏£‡∏∞‡∏ä‡∏≤‡∏¢‡∏î‡∏≥', '‡πÑ‡∏û‡∏•', '‡∏Å‡∏£‡∏∞‡∏ó‡πà‡∏≠‡∏°'],
                characteristics: ['‡∏ú‡∏™‡∏°‡∏ú‡∏™‡∏≤‡∏ô‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏°‡∏∏‡∏™‡∏•‡∏¥‡∏°', '‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß + ‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£', '‡∏°‡∏µ‡∏ï‡∏•‡∏≤‡∏î Halal', '‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å‡∏Å‡∏±‡∏ç‡∏ä‡∏≤‡πÉ‡∏ô‡πÄ‡∏Ç‡∏ï‡∏£‡πâ‡∏≠‡∏ô‡∏ä‡∏∑‡πâ‡∏ô']
            },
            'central': {
                name: '‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á',
                icon: 'üè≠',
                provinces: ['‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£', '‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ', '‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£', '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£', '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°', '‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°', '‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ', '‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ', '‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå', '‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ', '‡∏™‡∏∏‡∏û‡∏£‡∏£‡∏ì‡∏ö‡∏∏‡∏£‡∏µ', '‡∏ô‡∏Ñ‡∏£‡∏ô‡∏≤‡∏¢‡∏Å', '‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤', '‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ', '‡∏£‡∏∞‡∏¢‡∏≠‡∏á', '‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ', '‡∏ï‡∏£‡∏≤‡∏î', '‡∏™‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß', '‡∏õ‡∏£‡∏≤‡∏à‡∏µ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ', '‡∏≠‡πà‡∏≤‡∏á‡∏ó‡∏≠‡∏á', '‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤'],
                climate: '‡∏£‡πâ‡∏≠‡∏ô‡∏ä‡∏∑‡πâ‡∏ô ‡∏ù‡∏ô‡∏ï‡∏Å‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠',
                mainHerbs: ['‡∏Å‡∏±‡∏ç‡∏ä‡∏≤', '‡∏Ç‡∏°‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏ô', '‡∏Ç‡∏¥‡∏á', '‡∏Å‡∏£‡∏∞‡∏ä‡∏≤‡∏¢‡∏î‡∏≥', '‡πÑ‡∏û‡∏•', '‡∏Å‡∏£‡∏∞‡∏ó‡πà‡∏≠‡∏°'],
                characteristics: ['‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ SME 60%', '‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏•‡∏≤‡∏á-‡πÉ‡∏´‡∏ç‡πà 30%', '‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£ 10%', '‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏£‡∏£‡∏π‡∏õ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å', '‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏±‡∏ç‡∏ä‡∏≤‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå']
            },
            'northeast': {
                name: '‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏â‡∏µ‡∏¢‡∏á‡πÄ‡∏´‡∏ô‡∏∑‡∏≠',
                icon: 'üåæ',
                provinces: ['‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤', '‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå', '‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå', '‡∏®‡∏¥‡∏•‡∏≤‡∏•‡∏±‡∏¢', '‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏¢‡πÇ‡∏™‡∏ò‡∏£', '‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥', '‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÄ‡∏à‡∏£‡∏¥‡∏ç', '‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡∏•‡∏≥‡∏†‡∏π', '‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô', '‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ', '‡πÄ‡∏•‡∏¢', '‡∏´‡∏ô‡∏≠‡∏á‡∏Ñ‡∏≤‡∏¢', '‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°', '‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏≠‡πá‡∏î', '‡∏Å‡∏≤‡∏¨‡∏™‡∏¥‡∏ô‡∏ò‡∏∏‡πå', '‡∏™‡∏Å‡∏•‡∏ô‡∏Ñ‡∏£', '‡∏ô‡∏Ñ‡∏£‡∏û‡∏ô‡∏°', '‡∏°‡∏∏‡∏Å‡∏î‡∏≤‡∏´‡∏≤‡∏£', '‡∏ö‡∏∂‡∏á‡∏Å‡∏≤‡∏¨'],
                climate: '‡πÅ‡∏´‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏á ‡∏ù‡∏ô‡∏ô‡πâ‡∏≠‡∏¢ ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á 25-40¬∞C',
                mainHerbs: ['‡∏Å‡∏±‡∏ç‡∏ä‡∏≤', '‡∏Ç‡∏°‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏ô', '‡∏Ç‡∏¥‡∏á', '‡∏Å‡∏£‡∏∞‡∏ä‡∏≤‡∏¢‡∏î‡∏≥', '‡πÑ‡∏û‡∏•', '‡∏Å‡∏£‡∏∞‡∏ó‡πà‡∏≠‡∏°'],
                characteristics: ['‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡∏£‡∏≤‡∏¢‡∏¢‡πà‡∏≠‡∏¢ 80%', '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏π‡∏Å‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ 3-5 ‡πÑ‡∏£‡πà', '‡∏ó‡∏≥‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏ú‡∏™‡∏°‡∏ú‡∏™‡∏≤‡∏ô', '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏à‡∏≤‡∏Å‡∏õ‡∏®‡∏∏‡∏™‡∏±‡∏ï‡∏ß‡πå', '‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å‡∏Å‡∏±‡∏ç‡∏ä‡∏≤‡∏ó‡∏ô‡πÅ‡∏•‡πâ‡∏á']
            }
        };
    }

    /**
     * üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°
     */
    async initiateSurvey(userInfo = null) {
        const sessionId = uuidv4();
        const isGuest = !userInfo;
        
        const surveySession = {
            id: sessionId,
            isGuest,
            userInfo: userInfo || {},
            guestInfo: isGuest ? {} : null,
            selectedRegion: null,
            currentStep: isGuest ? 'guest-info' : 'region-selection',
            startedAt: new Date(),
            responses: {},
            status: 'in-progress'
        };

        if (isGuest) {
            this.guestSessions.set(sessionId, surveySession);
        } else {
            this.surveys.set(sessionId, surveySession);
        }

        return {
            sessionId,
            isGuest,
            nextStep: surveySession.currentStep,
            message: isGuest ? 
                'üëã ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö! ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°' :
                'üåø ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£‡πÑ‡∏ó‡∏¢'
        };
    }

    /**
     * üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Guest
     */
    async submitGuestInfo(sessionId, guestInfo) {
        const session = this.guestSessions.get(sessionId);
        if (!session || !session.isGuest) {
            throw new Error('Invalid guest session');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        const requiredFields = ['name', 'phone', 'province', 'district', 'farmType', 'farmSize'];
        const missingFields = requiredFields.filter(field => !guestInfo[field]);
        
        if (missingFields.length > 0) {
            throw new Error(`Missing required fields: ${missingFields.join(', ')}`);
        }

        session.guestInfo = guestInfo;
        session.currentStep = 'region-selection';

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó guest session
        this.guestSessions.set(sessionId, session);

        return {
            success: true,
            nextStep: 'region-selection',
            message: '‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì'
        };
    }

    /**
     * üó∫Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ
     */
    async selectRegion(sessionId, regionCode) {
        const session = this.surveys.get(sessionId) || this.guestSessions.get(sessionId);
        if (!session) {
            throw new Error('Invalid session');
        }

        if (!this.regions[regionCode]) {
            throw new Error('Invalid region code');
        }

        session.selectedRegion = regionCode;
        session.currentStep = 'survey-questions';

        return {
            success: true,
            region: this.regions[regionCode],
            nextStep: 'survey-questions',
            message: `üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å${this.regions[regionCode].name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°`
        };
    }

    /**
     * üìä ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°
     */
    async submitSurveyResponse(sessionId, questionId, response) {
        const session = this.surveys.get(sessionId) || this.guestSessions.get(sessionId);
        if (!session) {
            throw new Error('Invalid session');
        }

        if (!session.selectedRegion) {
            throw new Error('Region not selected');
        }

        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
        if (!session.responses[session.selectedRegion]) {
            session.responses[session.selectedRegion] = {};
        }
        
        session.responses[session.selectedRegion][questionId] = {
            answer: response,
            answeredAt: new Date()
        };

        return {
            success: true,
            message: '‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß'
        };
    }

    /**
     * ‚úÖ ‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
     */
    async completeSurvey(sessionId) {
        const session = this.surveys.get(sessionId) || this.guestSessions.get(sessionId);
        if (!session) {
            throw new Error('Invalid session');
        }

        session.status = 'completed';
        session.completedAt = new Date();

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ
        const summary = this.generateSurveyReport(session);

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• responses
        const responseId = uuidv4();
        this.responses.set(responseId, {
            id: responseId,
            sessionId,
            isGuest: session.isGuest,
            userInfo: session.isGuest ? session.guestInfo : session.userInfo,
            region: session.selectedRegion,
            responses: session.responses,
            summary,
            completedAt: session.completedAt
        });

        return {
            success: true,
            responseId,
            summary,
            message: 'üéâ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°! ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏†‡∏≤‡∏Ñ‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡πÑ‡∏ó‡∏¢'
        };
    }

    /**
     * üìà ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
     */
    generateSurveyReport(session) {
        const region = this.regions[session.selectedRegion];
        const responses = session.responses[session.selectedRegion] || {};
        
        return {
            participantInfo: {
                type: session.isGuest ? 'Guest' : 'Registered User',
                region: region.name,
                submittedAt: session.completedAt
            },
            responseCount: Object.keys(responses).length,
            keyInsights: this.extractKeyInsights(session.selectedRegion, responses),
            recommendations: this.generateRecommendations(session.selectedRegion, responses)
        };
    }

    /**
     * üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å
     */
    extractKeyInsights(regionCode, responses) {
        const insights = [];
        
        // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡∏ï‡∏≠‡∏ö
        if (responses['participant_type']) {
            insights.push(`‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡∏ï‡∏≠‡∏ö: ${responses['participant_type'].answer}`);
        }

        // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏π‡∏Å
        if (responses['current_herbs']) {
            insights.push(`‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏π‡∏Å: ${responses['current_herbs'].answer}`);
        }

        // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        if (responses['main_problems']) {
            insights.push(`‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å: ${responses['main_problems'].answer}`);
        }

        return insights;
    }

    /**
     * üí° ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞
     */
    generateRecommendations(regionCode, responses) {
        const region = this.regions[regionCode];
        const recommendations = [];

        // ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ
        switch (regionCode) {
            case 'north':
                recommendations.push('üèîÔ∏è ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏†‡∏π‡∏°‡∏¥‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏´‡∏ô‡∏≤‡∏ß‡πÄ‡∏¢‡πá‡∏ô');
                recommendations.push('üåø ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏à‡∏≤‡∏Å‡∏†‡∏π‡∏°‡∏¥‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏•‡πâ‡∏≤‡∏ô‡∏ô‡∏≤');
                break;
            case 'south':
                recommendations.push('üå¥ ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏™‡∏π‡πà‡∏ï‡∏•‡∏≤‡∏î Halal ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß');
                recommendations.push('üåä ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏ô‡πâ‡∏≥');
                break;
            case 'central':
                recommendations.push('üè≠ ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏£‡∏£‡∏π‡∏õ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å');
                recommendations.push('üíº ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ SME');
                break;
            case 'northeast':
                recommendations.push('üåæ ‡πÄ‡∏ô‡πâ‡∏ô‡∏û‡∏∑‡∏ä‡∏ó‡∏ô‡πÅ‡∏•‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ô‡πâ‡∏≥');
                recommendations.push('ü§ù ‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£');
                break;
        }

        return recommendations;
    }

    /**
     * üìä ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
     */
    async getAllSurveyStatistics() {
        const stats = {
            totalResponses: this.responses.size,
            byRegion: {},
            byParticipantType: {},
            completionRate: 0
        };

        // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ
        for (const [id, response] of this.responses) {
            const region = response.region;
            if (!stats.byRegion[region]) {
                stats.byRegion[region] = 0;
            }
            stats.byRegion[region]++;
        }

        return stats;
    }

    /**
     * üîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏ß‡∏à
     */
    async searchSurveyResponses(filters = {}) {
        const results = [];
        
        for (const [id, response] of this.responses) {
            let match = true;
            
            if (filters.region && response.region !== filters.region) {
                match = false;
            }
            
            if (filters.isGuest !== undefined && response.isGuest !== filters.isGuest) {
                match = false;
            }
            
            if (match) {
                results.push(response);
            }
        }
        
        return results;
    }

    /**
     * üìã ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô CSV
     */
    async exportSurveyData(regionCode = null) {
        const responses = regionCode ? 
            await this.searchSurveyResponses({ region: regionCode }) :
            Array.from(this.responses.values());

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á CSV headers
        const headers = ['Response ID', 'Region', 'Participant Type', 'Completed At', 'Total Questions'];
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á CSV rows
        const rows = responses.map(response => [
            response.id,
            this.regions[response.region]?.name || response.region,
            response.isGuest ? 'Guest' : 'Registered',
            response.completedAt.toISOString(),
            Object.keys(response.responses[response.region] || {}).length
        ]);

        return {
            headers,
            rows,
            filename: `survey_data_${regionCode || 'all'}_${new Date().toISOString().split('T')[0]}.csv`
        };
    }

    /**
     * üì± ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
     */
    async getRecentSurveyActivity(limit = 10) {
        const recent = Array.from(this.responses.values())
            .sort((a, b) => new Date(b.completedAt) - new Date(a.completedAt))
            .slice(0, limit);

        return recent.map(response => ({
            id: response.id,
            region: this.regions[response.region]?.name,
            participantType: response.isGuest ? 'Guest' : 'Registered User',
            completedAt: response.completedAt,
            questionsAnswered: Object.keys(response.responses[response.region] || {}).length
        }));
    }
}

module.exports = SurveyManager;