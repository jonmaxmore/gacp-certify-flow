/**
 * üé® Survey Frontend Components
 * UI/UX Components ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°
 */

const express = require('express');
const path = require('path');
const SurveyManager = require('./survey-manager');
const SurveyQuestions = require('./survey-questions');

class SurveyUIController {
    constructor() {
        this.surveyManager = new SurveyManager();
        this.surveyQuestions = new SurveyQuestions();
        this.router = express.Router();
        this.setupRoutes();
    }

    setupRoutes() {
        // üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°
        this.router.get('/', this.renderSurveyHome.bind(this));
        
        // üîê ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏° (Guest/Logged in)
        this.router.post('/start', this.startSurvey.bind(this));
        
        // üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß (Guest)
        this.router.post('/guest-info', this.submitGuestInfo.bind(this));
        
        // üó∫Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ
        this.router.post('/select-region', this.selectRegion.bind(this));
        
        // üìã ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°
        this.router.get('/survey/:sessionId', this.renderSurveyForm.bind(this));
        
        // üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
        this.router.post('/response', this.submitResponse.bind(this));
        
        // ‚úÖ ‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        this.router.post('/complete', this.completeSurvey.bind(this));
        
        // üìä ‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        this.router.get('/results/:responseId', this.viewResults.bind(this));

        // üìà API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AJAX
        this.router.get('/api/regions', this.getRegions.bind(this));
        this.router.get('/api/questions/:region', this.getQuestionsByRegion.bind(this));
    }

    /**
     * üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°
     */
    async renderSurveyHome(req, res) {
        const isLoggedIn = req.session && req.session.user;
        
        res.json({
            view: 'survey_home',
            data: {
                title: 'üåø ‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£‡πÑ‡∏ó‡∏¢',
                subtitle: '‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ',
                isLoggedIn,
                user: isLoggedIn ? req.session.user : null,
                regions: this.surveyManager.regions,
                features: [
                    'üìç ‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ',
                    'üîí ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏Å‡∏õ‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° PDPA',
                    '‚ö° ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô',
                    'üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏†‡∏≤‡∏Ñ‡πÄ‡∏Å‡∏©‡∏ï‡∏£'
                ],
                flow: {
                    guest: [
                        '1. ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏ü‡∏≤‡∏£‡πå‡∏°',
                        '2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ',
                        '3. ‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°',
                        '4. ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå'
                    ],
                    logged: [
                        '1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ',
                        '2. ‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°',
                        '3. ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå'
                    ]
                }
            },
            template: this.generateSurveyHomeHTML()
        });
    }

    /**
     * üîê ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°
     */
    async startSurvey(req, res) {
        try {
            const userInfo = req.session && req.session.user ? req.session.user : null;
            const result = await this.surveyManager.initiateSurvey(userInfo);
            
            // ‡πÄ‡∏Å‡πá‡∏ö session ID
            req.session.surveySessionId = result.sessionId;
            
            res.json({
                success: true,
                ...result,
                nextAction: result.isGuest ? 'guest-info' : 'region-selection'
            });
        } catch (error) {
            res.status(400).json({
                success: false,
                message: error.message
            });
        }
    }

    /**
     * üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß (Guest)
     */
    async submitGuestInfo(req, res) {
        try {
            const { sessionId, guestInfo } = req.body;
            const result = await this.surveyManager.submitGuestInfo(sessionId, guestInfo);
            
            res.json({
                success: true,
                ...result,
                template: this.generateRegionSelectionHTML()
            });
        } catch (error) {
            res.status(400).json({
                success: false,
                message: error.message
            });
        }
    }

    /**
     * üó∫Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ
     */
    async selectRegion(req, res) {
        try {
            const { sessionId, regionCode } = req.body;
            const result = await this.surveyManager.selectRegion(sessionId, regionCode);
            
            res.json({
                success: true,
                ...result,
                surveyUrl: `/survey/survey/${sessionId}`,
                template: this.generateSurveyStartHTML(result.region)
            });
        } catch (error) {
            res.status(400).json({
                success: false,
                message: error.message
            });
        }
    }

    /**
     * üìã ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°
     */
    async renderSurveyForm(req, res) {
        try {
            const { sessionId } = req.params;
            const session = this.surveyManager.surveys.get(sessionId) || 
                           this.surveyManager.guestSessions.get(sessionId);
            
            if (!session) {
                return res.status(404).json({
                    success: false,
                    message: 'Survey session not found'
                });
            }

            const questions = this.surveyQuestions.getQuestionsByRegion(session.selectedRegion);
            const completion = this.surveyQuestions.calculateCompletionPercentage(
                session.selectedRegion, 
                session.responses[session.selectedRegion] || {}
            );

            res.json({
                view: 'survey_form',
                data: {
                    session,
                    questions,
                    completion,
                    region: this.surveyManager.regions[session.selectedRegion]
                },
                template: this.generateSurveyFormHTML(questions, session, completion)
            });
        } catch (error) {
            res.status(500).json({
                success: false,
                message: error.message
            });
        }
    }

    /**
     * üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
     */
    async submitResponse(req, res) {
        try {
            const { sessionId, questionId, response } = req.body;
            const result = await this.surveyManager.submitSurveyResponse(sessionId, questionId, response);
            
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
            const session = this.surveyManager.surveys.get(sessionId) || 
                           this.surveyManager.guestSessions.get(sessionId);
            const completion = this.surveyQuestions.calculateCompletionPercentage(
                session.selectedRegion, 
                session.responses[session.selectedRegion] || {}
            );

            res.json({
                success: true,
                ...result,
                completion,
                canComplete: completion >= 80 // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Ñ‡∏£‡∏ö 80%
            });
        } catch (error) {
            res.status(400).json({
                success: false,
                message: error.message
            });
        }
    }

    /**
     * ‚úÖ ‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
     */
    async completeSurvey(req, res) {
        try {
            const { sessionId } = req.body;
            const result = await this.surveyManager.completeSurvey(sessionId);
            
            res.json({
                success: true,
                ...result,
                resultsUrl: `/survey/results/${result.responseId}`,
                template: this.generateCompletionHTML(result)
            });
        } catch (error) {
            res.status(400).json({
                success: false,
                message: error.message
            });
        }
    }

    /**
     * üìä ‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
     */
    async viewResults(req, res) {
        try {
            const { responseId } = req.params;
            const response = this.surveyManager.responses.get(responseId);
            
            if (!response) {
                return res.status(404).json({
                    success: false,
                    message: 'Response not found'
                });
            }

            res.json({
                view: 'survey_results',
                data: response,
                template: this.generateResultsHTML(response)
            });
        } catch (error) {
            res.status(500).json({
                success: false,
                message: error.message
            });
        }
    }

    /**
     * üìç API: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ
     */
    async getRegions(req, res) {
        res.json({
            success: true,
            regions: this.surveyManager.regions
        });
    }

    /**
     * üìã API: ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ
     */
    async getQuestionsByRegion(req, res) {
        try {
            const { region } = req.params;
            const questions = this.surveyQuestions.getQuestionsByRegion(region);
            
            if (!questions) {
                return res.status(404).json({
                    success: false,
                    message: 'Region not found'
                });
            }

            res.json({
                success: true,
                questions
            });
        } catch (error) {
            res.status(500).json({
                success: false,
                message: error.message
            });
        }
    }

    /**
     * üé® HTML Templates
     */
    generateSurveyHomeHTML() {
        return `
        <div class="survey-home">
            <div class="hero-section">
                <div class="container">
                    <h1 class="hero-title">üåø ‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£‡πÑ‡∏ó‡∏¢</h1>
                    <p class="hero-subtitle">‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ</p>
                    
                    <div class="user-options">
                        <div class="option-card guest-option">
                            <h3>üë§ ‡∏ú‡∏π‡πâ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ä‡∏°</h3>
                            <p>‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô</p>
                            <ul>
                                <li>‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏ü‡∏≤‡∏£‡πå‡∏°</li>
                                <li>‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ</li>
                                <li>‚úÖ ‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°</li>
                                <li>‚úÖ ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå</li>
                            </ul>
                            <button class="btn btn-secondary" onclick="startSurvey(false)">
                                ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°
                            </button>
                        </div>
                        
                        <div class="option-card member-option">
                            <h3>üîê ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</h3>
                            <p>‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤</p>
                            <ul>
                                <li>üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)</li>
                                <li>üìä ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö</li>
                                <li>üîÑ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</li>
                                <li>üìß ‡∏£‡∏±‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó</li>
                            </ul>
                            <button class="btn btn-primary" onclick="redirectToLogin()">
                                ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="regions-preview">
                <div class="container">
                    <h2>üó∫Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h2>
                    <div class="regions-grid">
                        <div class="region-card" data-region="north">
                            <div class="region-icon">üèîÔ∏è</div>
                            <h3>‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠</h3>
                            <p>9 ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î ‚Ä¢ ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÄ‡∏¢‡πá‡∏ô ‚Ä¢ ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏Å‡∏±‡∏ç‡∏ä‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û</p>
                            <div class="herbs-preview">
                                <span class="herb-tag main">üåø ‡∏Å‡∏±‡∏ç‡∏ä‡∏≤</span>
                                <span class="herb-tag">‡∏Ç‡∏°‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏ô</span>
                                <span class="herb-tag">‡∏Ç‡∏¥‡∏á</span>
                            </div>
                        </div>

                        <div class="region-card" data-region="northeast">
                            <div class="region-icon">üåæ</div>
                            <h3>‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏â‡∏µ‡∏¢‡∏á‡πÄ‡∏´‡∏ô‡∏∑‡∏≠</h3>
                            <p>20 ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î ‚Ä¢ ‡πÅ‡∏´‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏á ‚Ä¢ ‡∏Å‡∏±‡∏ç‡∏ä‡∏≤‡∏ó‡∏ô‡πÅ‡∏•‡πâ‡∏á</p>
                            <div class="herbs-preview">
                                <span class="herb-tag main">üåø ‡∏Å‡∏±‡∏ç‡∏ä‡∏≤</span>
                                <span class="herb-tag">‡∏Å‡∏£‡∏∞‡∏ä‡∏≤‡∏¢‡∏î‡∏≥</span>
                                <span class="herb-tag">‡πÑ‡∏û‡∏•</span>
                            </div>
                        </div>

                        <div class="region-card" data-region="central">
                            <div class="region-icon">üè≠</div>
                            <h3>‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á</h3>
                            <p>22 ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î ‚Ä¢ ‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à SME ‚Ä¢ ‡∏®‡∏π‡∏ô‡∏¢‡πå‡πÅ‡∏õ‡∏£‡∏£‡∏π‡∏õ‡∏Å‡∏±‡∏ç‡∏ä‡∏≤</p>
                            <div class="herbs-preview">
                                <span class="herb-tag main">üåø ‡∏Å‡∏±‡∏ç‡∏ä‡∏≤</span>
                                <span class="herb-tag">‡∏Ç‡∏°‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏ô</span>
                                <span class="herb-tag">‡∏Å‡∏£‡∏∞‡∏ó‡πà‡∏≠‡∏°</span>
                            </div>
                        </div>

                        <div class="region-card" data-region="south">
                            <div class="region-icon">üå¥</div>
                            <h3>‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ</h3>
                            <p>14 ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î ‚Ä¢ ‡∏ä‡∏∑‡πâ‡∏ô ‚Ä¢ ‡∏Å‡∏±‡∏ç‡∏ä‡∏≤ Halal & ‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß</p>
                            <div class="herbs-preview">
                                <span class="herb-tag main">üåø ‡∏Å‡∏±‡∏ç‡∏ä‡∏≤</span>
                                <span class="herb-tag">‡∏Ç‡∏¥‡∏á</span>
                                <span class="herb-tag">‡∏Å‡∏£‡∏∞‡∏ä‡∏≤‡∏¢‡∏î‡∏≥</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="features-section">
                <div class="container">
                    <h2>‚ú® ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö</h2>
                    <div class="features-grid">
                        <div class="feature-item">
                            <div class="feature-icon">üîí</div>
                            <h3>‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ PDPA</h3>
                            <p>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏Å‡∏õ‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢</p>
                        </div>
                        <div class="feature-item">
                            <div class="feature-icon">üìä</div>
                            <h3>‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å</h3>
                            <p>‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ</p>
                        </div>
                        <div class="feature-item">
                            <div class="feature-icon">üåç</div>
                            <h3>‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏ó‡∏¢</h3>
                            <p>‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ</p>
                        </div>
                        <div class="feature-item">
                            <div class="feature-icon">üì±</div>
                            <h3>‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢</h3>
                            <p>‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <style>
        .survey-home {
            min-height: 100vh;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .hero-section {
            padding: 80px 0;
            color: white;
            text-align: center;
        }

        .hero-title {
            font-size: 3rem;
            margin-bottom: 1rem;
            font-weight: 700;
        }

        .hero-subtitle {
            font-size: 1.2rem;
            margin-bottom: 3rem;
            opacity: 0.9;
        }

        .user-options {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
            max-width: 800px;
            margin: 0 auto;
        }

        .option-card {
            background: white;
            border-radius: 20px;
            padding: 2rem;
            color: #333;
            text-align: left;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }

        .option-card:hover {
            transform: translateY(-5px);
        }

        .regions-preview {
            background: white;
            padding: 80px 0;
        }

        .regions-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-top: 2rem;
        }

        .region-card {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 1.5rem;
            text-align: center;
            transition: all 0.3s ease;
            cursor: pointer;
            border: 2px solid transparent;
        }

        .region-card:hover {
            background: #e9ecef;
            border-color: #667eea;
            transform: translateY(-3px);
        }

        .region-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }

        .herbs-preview {
            margin-top: 1rem;
        }

        .herb-tag {
            display: inline-block;
            background: #667eea;
            color: white;
            padding: 0.25rem 0.5rem;
            border-radius: 10px;
            font-size: 0.8rem;
            margin: 0.2rem;
        }

        .herb-tag.main {
            background: #28a745;
            font-weight: bold;
            font-size: 0.9rem;
            border: 2px solid #20c997;
        }

        .features-section {
            background: #f8f9fa;
            padding: 80px 0;
        }

        .features-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 2rem;
            margin-top: 2rem;
        }

        .feature-item {
            text-align: center;
            padding: 1.5rem;
        }

        .feature-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 25px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            width: 100%;
            margin-top: 1rem;
        }

        .btn-primary {
            background: #667eea;
            color: white;
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }

        @media (max-width: 768px) {
            .hero-title {
                font-size: 2rem;
            }
            
            .user-options {
                grid-template-columns: 1fr;
            }
            
            .regions-grid {
                grid-template-columns: 1fr;
            }
        }
        </style>

        <script>
        function startSurvey(isLoggedIn) {
            fetch('/survey/start', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ isLoggedIn })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    if (data.isGuest) {
                        showGuestInfoForm(data.sessionId);
                    } else {
                        showRegionSelection(data.sessionId);
                    }
                } else {
                    alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + data.message);
                }
            })
            .catch(error => {
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
            });
        }

        function redirectToLogin() {
            window.location.href = '/auth/login?redirect=/survey';
        }
        </script>
        `;
    }

    generateGuestInfoFormHTML() {
        return `
        <div class="guest-info-form">
            <div class="container">
                <h2>üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏ü‡∏≤‡∏£‡πå‡∏°</h2>
                <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°</p>
                
                <form id="guestInfoForm">
                    <div class="form-group">
                        <label>‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• *</label>
                        <input type="text" name="name" required>
                    </div>
                    
                    <div class="form-group">
                        <label>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå *</label>
                        <input type="tel" name="phone" required>
                    </div>
                    
                    <div class="form-group">
                        <label>‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î *</label>
                        <select name="province" required>
                            <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</option>
                            <!-- ‡∏à‡∏∞‡πÉ‡∏™‡πà options ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î -->
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label>‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ *</label>
                        <input type="text" name="district" required>
                    </div>
                    
                    <div class="form-group">
                        <label>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ü‡∏≤‡∏£‡πå‡∏°/‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à *</label>
                        <select name="farmType" required>
                            <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</option>
                            <option value="farmer">‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£/‡∏ú‡∏π‡πâ‡∏õ‡∏•‡∏π‡∏Å</option>
                            <option value="business">‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£/‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô</option>
                            <option value="trader">‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠/‡∏û‡πà‡∏≠‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏ô‡∏Å‡∏•‡∏≤‡∏á</option>
                            <option value="government">‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏±‡∏ê/‡∏™‡∏´‡∏Å‡∏£‡∏ì‡πå</option>
                            <option value="other">‡∏≠‡∏∑‡πà‡∏ô‡πÜ</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label>‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà (‡πÑ‡∏£‡πà) *</label>
                        <select name="farmSize" required>
                            <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î</option>
                            <option value="<1">‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 1 ‡πÑ‡∏£‡πà</option>
                            <option value="1-5">1-5 ‡πÑ‡∏£‡πà</option>
                            <option value="5-10">5-10 ‡πÑ‡∏£‡πà</option>
                            <option value="10-20">10-20 ‡πÑ‡∏£‡πà</option>
                            <option value=">20">‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 20 ‡πÑ‡∏£‡πà</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label>Email (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)</label>
                        <input type="email" name="email">
                    </div>
                    
                    <div class="form-group">
                        <label>Line ID (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)</label>
                        <input type="text" name="lineId">
                    </div>
                    
                    <div class="privacy-notice">
                        <h4>üîí ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•</h4>
                        <p>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏Å‡∏õ‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° ‡∏û.‡∏£.‡∏ö. ‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• ‡∏û.‡∏®. 2562 ‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠:</p>
                        <ul>
                            <li>üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ</li>
                            <li>üìã ‡∏à‡∏±‡∏î‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏±‡∏ê</li>
                            <li>üìß ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£ (‡∏´‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°)</li>
                        </ul>
                        <label class="checkbox-container">
                            <input type="checkbox" name="consent" required>
                            <span class="checkmark"></span>
                            ‡∏â‡∏±‡∏ô‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô *
                        </label>
                    </div>
                    
                    <button type="submit" class="btn btn-primary">
                        ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ üó∫Ô∏è
                    </button>
                </form>
            </div>
        </div>
        `;
    }

    generateRegionSelectionHTML() {
        return `
        <div class="region-selection">
            <div class="container">
                <h2>üó∫Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h2>
                <p>‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ‡∏°‡∏µ‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£‡∏´‡∏•‡∏±‡∏Å</p>
                
                <div class="regions-selection-grid">
                    ${Object.entries(this.surveyManager.regions).map(([code, region]) => `
                        <div class="region-selection-card" onclick="selectRegion('${code}')">
                            <div class="region-header">
                                <span class="region-icon">${region.icon}</span>
                                <h3>${region.name}</h3>
                            </div>
                            
                            <div class="region-details">
                                <div class="detail-item">
                                    <strong>‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î:</strong> ${region.provinces.length} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
                                </div>
                                <div class="detail-item">
                                    <strong>‡∏†‡∏π‡∏°‡∏¥‡∏≠‡∏≤‡∏Å‡∏≤‡∏®:</strong> ${region.climate}
                                </div>
                                <div class="detail-item">
                                    <strong>‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£‡∏´‡∏•‡∏±‡∏Å:</strong> ${region.mainHerbs.join(', ')}
                                </div>
                            </div>
                            
                            <div class="region-characteristics">
                                <h4>‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏î‡πà‡∏ô:</h4>
                                <ul>
                                    ${region.characteristics.map(char => `<li>${char}</li>`).join('')}
                                </ul>
                            </div>
                            
                            <button class="btn btn-primary region-select-btn">
                                ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å${region.name}
                            </button>
                        </div>
                    `).join('')}
                </div>
            </div>
        </div>
        
        <script>
        function selectRegion(regionCode) {
            const sessionId = new URLSearchParams(window.location.search).get('sessionId') || 
                             sessionStorage.getItem('surveySessionId');
            
            fetch('/survey/select-region', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ sessionId, regionCode })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.href = data.surveyUrl;
                } else {
                    alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + data.message);
                }
            })
            .catch(error => {
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
            });
        }
        </script>
        `;
    }
}

module.exports = SurveyUIController;