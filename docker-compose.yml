services:
  mongodb:
    image: mongo:6.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: gacp_db
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - gacp_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: mongod --auth

  redis:
    image: redis:7-alpine
    container_name: gacp-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - gacp_network

  postgresql:
    image: postgres:15-alpine
    container_name: gacp-postgresql
    environment:
      POSTGRES_DB: gacp_certify
      POSTGRES_USER: gacp_user
      POSTGRES_PASSWORD: gacp_secure_pass_2024
      POSTGRES_INITDB_ARGS: "--auth-local=trust --auth-host=md5"
    ports:
      - "5432:5432"
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./sql/database-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./sql/security-rls-policies.sql:/docker-entrypoint-initdb.d/02-security.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gacp_user -d gacp_certify"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - gacp_network

  core-certification:
    build: 
      context: ./services/core-certification
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
      PORT: 3001
      USE_ADVANCED_SERVICE: true
      MONGODB_URI: mongodb://admin:${MONGO_PASSWORD}@mongodb:27017/gacp_db?authSource=admin
      POSTGRESQL_URI: postgresql://gacp_user:gacp_secure_pass_2024@postgresql:5432/gacp_certify
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      LOG_LEVEL: info
    ports:
      - "3001:3001"
    networks:
      - gacp_network
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgresql:
        condition: service_healthy
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - gacp_network
    depends_on:
      - core-certification

volumes:
  mongodb_data:
  redis_data:
  postgresql_data:

networks:
  gacp_network:
    driver: bridge