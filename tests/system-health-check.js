/**
 * üîç GACP System Health Check & Error Analysis
 * ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö GACP
 */

class SystemHealthChecker {
    constructor() {
        this.healthReport = {
            timestamp: new Date().toISOString(),
            overall_status: 'UNKNOWN',
            components: {},
            errors: [],
            warnings: [],
            recommendations: []
        };
    }

    async runHealthCheck() {
        console.log('üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö GACP...\n');

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
        await this.checkThaiHerbalDatabase();
        await this.checkFeeCalculator();
        await this.checkSurveySystem();
        await this.checkLicenseManager();
        await this.checkWorkflowSystem();

        // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        this.generateOverallStatus();
        this.generateRecommendations();
        
        return this.healthReport;
    }

    async checkThaiHerbalDatabase() {
        console.log('üåø ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£‡πÑ‡∏ó‡∏¢...');
        
        try {
            const ThaiHerbalDatabase = require('../models/thai-herbal-database');
            const db = new ThaiHerbalDatabase();
            
            // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£‡∏´‡∏•‡∏±‡∏Å 6 ‡∏ä‡∏ô‡∏¥‡∏î
            const mainHerbs = ['‡∏Å‡∏±‡∏ç‡∏ä‡∏≤', '‡∏Ç‡∏°‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏ô', '‡∏Ç‡∏¥‡∏á', '‡∏Å‡∏£‡∏∞‡∏ä‡∏≤‡∏¢‡∏î‡∏≥', '‡πÑ‡∏û‡∏•', '‡∏Å‡∏£‡∏∞‡∏ó‡πà‡∏≠‡∏°'];
            const testResults = {};
            
            for (const herb of mainHerbs) {
                try {
                    const info = db.getHerbInfo(herb);
                    testResults[herb] = { status: 'OK', fee_multiplier: info.fee_multiplier };
                } catch (error) {
                    testResults[herb] = { status: 'ERROR', error: error.message };
                    this.healthReport.errors.push(`‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£: ${error.message}`);
                }
            }

            // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏≠‡∏∑‡πà‡∏ô‡πÜ
            const aliases = ['‡∏Ç‡∏°‡∏¥‡πâ‡∏ô', '‡∏Ç‡∏¥‡∏á‡πÅ‡∏Å‡πà', '‡∏û‡∏•‡∏≤‡∏¢', '‡∏Å‡∏±‡∏ç‡∏ä‡∏á'];
            for (const alias of aliases) {
                try {
                    db.getHerbInfo(alias);
                    testResults[`alias_${alias}`] = { status: 'OK' };
                } catch (error) {
                    testResults[`alias_${alias}`] = { status: 'ERROR' };
                    this.healthReport.warnings.push(`‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å "${alias}" ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ`);
                }
            }

            this.healthReport.components.thai_herbal_database = {
                status: 'HEALTHY',
                main_herbs: testResults,
                total_herbs: Object.keys(db.herbs).length
            };

            console.log('   ‚úÖ ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£‡πÑ‡∏ó‡∏¢: ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ');
            console.log(`   üìä ‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£‡∏´‡∏•‡∏±‡∏Å 6 ‡∏ä‡∏ô‡∏¥‡∏î: ${mainHerbs.map(h => testResults[h]?.status === 'OK' ? '‚úÖ' : '‚ùå').join(' ')}`);

        } catch (error) {
            this.healthReport.components.thai_herbal_database = {
                status: 'ERROR',
                error: error.message
            };
            this.healthReport.errors.push(`‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£: ${error.message}`);
            console.log('   ‚ùå ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£‡πÑ‡∏ó‡∏¢: ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤');
        }
    }

    async checkFeeCalculator() {
        console.log('üí∞ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°...');
        
        try {
            const GACPFeeCalculator = require('../services/finance-service/gacp-fee-calculator');
            const calculator = new GACPFeeCalculator();
            
            // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
            const testApplications = [
                { herbs: ['‡∏Å‡∏±‡∏ç‡∏ä‡∏≤'], expected_multiplier: 2.0 },
                { herbs: ['‡∏Ç‡∏°‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏ô'], expected_multiplier: 1.0 },
                { herbs: ['‡∏Å‡∏±‡∏ç‡∏ä‡∏≤', '‡∏Ç‡∏°‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏ô'], expected_multiplier: 2.0 }
            ];

            const testResults = {};
            for (const test of testApplications) {
                try {
                    const initialFee = calculator.calculateInitialFee(test.herbs);
                    const fieldFee = calculator.calculateFieldAuditFee(test.herbs, {});
                    
                    testResults[test.herbs.join(',')] = {
                        status: 'OK',
                        initial_fee: initialFee.final_amount,
                        field_fee: fieldFee.final_amount
                    };
                } catch (error) {
                    testResults[test.herbs.join(',')] = {
                        status: 'ERROR',
                        error: error.message
                    };
                    this.healthReport.errors.push(`‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°: ${error.message}`);
                }
            }

            this.healthReport.components.fee_calculator = {
                status: 'HEALTHY',
                test_results: testResults
            };

            console.log('   ‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°: ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ');

        } catch (error) {
            this.healthReport.components.fee_calculator = {
                status: 'ERROR',
                error: error.message
            };
            this.healthReport.errors.push(`‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°: ${error.message}`);
            console.log('   ‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°: ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤');
        }
    }

    async checkSurveySystem() {
        console.log('üìã ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°...');
        
        try {
            const SurveyManager = require('../services/survey-management/src/survey-manager');
            const SurveyQuestions = require('../services/survey-management/src/survey-questions');
            
            const surveyManager = new SurveyManager();
            const surveyQuestions = new SurveyQuestions();

            // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á session
            const guestSession = await surveyManager.initiateSurvey(null);
            const userSession = await surveyManager.initiateSurvey({ name: 'Test User' });

            // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ
            await surveyManager.selectRegion(guestSession.sessionId, 'north');

            // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏∏‡∏Å‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ
            const regions = ['north', 'south', 'central', 'northeast'];
            const questionTests = {};
            
            for (const region of regions) {
                const questions = surveyQuestions.getQuestionsByRegion(region);
                questionTests[region] = {
                    status: questions ? 'OK' : 'ERROR',
                    sections: questions?.sections?.length || 0,
                    cannabis_questions: questions?.sections?.some(s => 
                        s.questions?.some(q => q.id === 'cannabis_specific')
                    ) || false
                };
            }

            this.healthReport.components.survey_system = {
                status: 'HEALTHY',
                regions: questionTests,
                sessions_created: 2
            };

            console.log('   ‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°: ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ');
            console.log(`   üó∫Ô∏è ‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ: ${regions.map(r => questionTests[r]?.status === 'OK' ? '‚úÖ' : '‚ùå').join(' ')}`);

        } catch (error) {
            this.healthReport.components.survey_system = {
                status: 'ERROR',
                error: error.message
            };
            this.healthReport.errors.push(`‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°: ${error.message}`);
            console.log('   ‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°: ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤');
        }
    }

    async checkLicenseManager() {
        console.log('üìÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï...');
        
        try {
            const ThaiHerbalLicenseManager = require('../services/thai-herbal-license-manager');
            const licenseManager = new ThaiHerbalLicenseManager();

            // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
            const testApplication = {
                national_id: '1234567890123',
                full_name: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö',
                date_of_birth: '1980-01-01',
                address: '123 ‡∏´‡∏°‡∏π‡πà 1 ‡∏ï.‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏≠.‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏à.‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
                phone_number: '081-234-5678',
                email: 'test@example.com',
                herbs: ['‡∏Å‡∏±‡∏ç‡∏ä‡∏≤', '‡∏Ç‡∏°‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏ô'],
                farm_coordinates: '14.0000,100.0000',
                farm_address: '‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
                farm_size: '1 ‡πÑ‡∏£‡πà',
                ownership_type: '‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏á',
                cultivation_method: '‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏¢‡πå',
                expected_yield: '100 ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°',
                cultivation_purpose: '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤',
                user_id: 'test_user_001',
                location: {
                    region: '‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á',
                    province: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
                    district: '‡∏ö‡∏≤‡∏á‡∏£‡∏±‡∏Å'
                },
                // PDPA Consent data
                pdpa_consent: true,
                consent_purposes: ['‡∏Ç‡∏≠‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏õ‡∏•‡∏π‡∏Å‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£‡πÑ‡∏ó‡∏¢'],
                consent_timestamp: new Date().toISOString(),
                consent_version: '1.0'
            };

            // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö createApplication method (‡πÉ‡∏´‡∏°‡πà)
            console.log('   üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö createApplication method...');
            const application = await licenseManager.createApplication(testApplication);
            console.log('   ‚úÖ createApplication method ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');

            // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö getApplication method
            console.log('   üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö getApplication method...');
            const retrievedApp = await licenseManager.getApplication('TEST-001');
            console.log('   ‚úÖ getApplication method ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');

            // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö updateApplicationStatus method
            console.log('   üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö updateApplicationStatus method...');
            const statusUpdate = await licenseManager.updateApplicationStatus('TEST-001', 'SUBMITTED', 'Test update');
            console.log('   ‚úÖ updateApplicationStatus method ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');

            this.healthReport.components.license_manager = {
                status: 'HEALTHY',
                test_application_id: application.application_id,
                methods_tested: ['createApplication', 'getApplication', 'updateApplicationStatus', 'createLicenseApplication'],
                details: 'All API methods working properly'
            };

            console.log('   ‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï: ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ');

        } catch (error) {
            this.healthReport.components.license_manager = {
                status: 'ERROR',
                error: error.message,
                details: 'API methods missing or not working'
            };
            this.healthReport.errors.push(`‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï: ${error.message}`);
            console.log('   ‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï: ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ -', error.message);
        }
    }

    async checkWorkflowSystem() {
        console.log('üîÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Workflow...');
        
        try {
            const ApplicationStateManager = require('../services/workflow-service/application-state-manager');
            const stateManager = new ApplicationStateManager();

            // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö state transitions
            const testTransitions = [
                { from: 'draft', to: 'submitted', valid: true },
                { from: 'submitted', to: 'audit_passed', valid: false },
                { from: 'under_review', to: 'review_passed', valid: true }
            ];

            const transitionResults = {};
            for (const test of testTransitions) {
                try {
                    const canTransition = stateManager.canTransition(test.from, test.to);
                    transitionResults[`${test.from}_to_${test.to}`] = {
                        expected: test.valid,
                        actual: canTransition,
                        status: canTransition === test.valid ? 'OK' : 'ERROR'
                    };
                } catch (error) {
                    transitionResults[`${test.from}_to_${test.to}`] = {
                        status: 'ERROR',
                        error: error.message
                    };
                }
            }

            this.healthReport.components.workflow_system = {
                status: 'HEALTHY',
                transition_tests: transitionResults
            };

            console.log('   ‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö Workflow: ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ');

        } catch (error) {
            this.healthReport.components.workflow_system = {
                status: 'ERROR',
                error: error.message
            };
            this.healthReport.errors.push(`‡∏£‡∏∞‡∏ö‡∏ö Workflow: ${error.message}`);
            console.log('   ‚ùå ‡∏£‡∏∞‡∏ö‡∏ö Workflow: ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤');
        }
    }

    generateOverallStatus() {
        const componentStatuses = Object.values(this.healthReport.components)
            .map(comp => comp.status);
        
        const errorCount = componentStatuses.filter(s => s === 'ERROR').length;
        const healthyCount = componentStatuses.filter(s => s === 'HEALTHY').length;
        
        if (errorCount === 0) {
            this.healthReport.overall_status = 'HEALTHY';
        } else if (healthyCount > errorCount) {
            this.healthReport.overall_status = 'WARNING';
        } else {
            this.healthReport.overall_status = 'CRITICAL';
        }
    }

    generateRecommendations() {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏∞‡πÅ‡∏ô‡∏∞‡∏ï‡∏≤‡∏°‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö
        if (this.healthReport.errors.length > 0) {
            this.healthReport.recommendations.push(
                'üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç error ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå'
            );
        }

        if (this.healthReport.warnings.length > 0) {
            this.healthReport.recommendations.push(
                '‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö warning ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô'
            );
        }

        // ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏∞‡πÅ‡∏ô‡∏∞‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
        this.healthReport.recommendations.push(
            'üìä ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ load testing ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á',
            'üîí ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PDPA',
            'üìù ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
            'üåø ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£‡∏û‡∏∑‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£'
        );
    }

    printSummaryReport() {
        const status = this.healthReport.overall_status;
        const statusIcon = {
            'HEALTHY': '‚úÖ',
            'WARNING': '‚ö†Ô∏è',
            'CRITICAL': 'üö®'
        }[status] || '‚ùì';

        console.log('\n' + '='.repeat(60));
        console.log(`${statusIcon} ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö GACP: ${status}`);
        console.log('='.repeat(60));

        console.log('\nüìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏ö:');
        Object.entries(this.healthReport.components).forEach(([name, comp]) => {
            const icon = comp.status === 'HEALTHY' ? '‚úÖ' : '‚ùå';
            console.log(`   ${icon} ${name}: ${comp.status}`);
        });

        if (this.healthReport.errors.length > 0) {
            console.log('\nüö® ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏ö:');
            this.healthReport.errors.forEach((error, i) => {
                console.log(`   ${i + 1}. ${error}`);
            });
        }

        if (this.healthReport.warnings.length > 0) {
            console.log('\n‚ö†Ô∏è ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:');
            this.healthReport.warnings.forEach((warning, i) => {
                console.log(`   ${i + 1}. ${warning}`);
            });
        }

        console.log('\nüí° ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏∞‡πÅ‡∏ô‡∏∞:');
        this.healthReport.recommendations.forEach((rec, i) => {
            console.log(`   ${i + 1}. ${rec}`);
        });

        console.log('\nüöÄ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô:');
        if (this.healthReport.errors.length === 0) {
            console.log('   ‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!');
        } else {
            console.log('   üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç error ‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á');
        }
    }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
async function runSystemHealthCheck() {
    const checker = new SystemHealthChecker();
    const report = await checker.runHealthCheck();
    checker.printSummaryReport();
    
    return report;
}

module.exports = { SystemHealthChecker, runSystemHealthCheck };

// ‡∏£‡∏±‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏≤‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
if (require.main === module) {
    runSystemHealthCheck().catch(console.error);
}